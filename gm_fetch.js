var GM_fetch = (function () {
  'use strict';

  function parseRawHeaders(h) {
      const s = h.trim();
      if (!s) {
          return new Headers();
      }
      const array = s.split("\r\n").map((value) => {
          let s = value.split(":");
          return [s[0].trim(), s[1].trim()];
      });
      return new Headers(array);
  }
  function parseGMResponse(res) {
      const r = new Response(res.response, {
          statusText: res.statusText,
          status: res.status,
          headers: parseRawHeaders(res.responseHeaders),
      });
      Object.defineProperty(r, "url", {
          value: res.finalUrl,
      });
      return r;
  }

  async function GM_fetch(input, init) {
      const request = new Request(input, init);
      let data;
      if (init?.body) {
          data = await request.text();
      }
      return await XHR(request, data);
  }
  function XHR(request, data) {
      return new Promise((resolve, reject) => {
          if (request.signal && request.signal.aborted) {
              return reject(new DOMException("Aborted", "AbortError"));
          }
          GM.xmlHttpRequest({
              url: request.url,
              method: gmXHRMethod(request.method.toUpperCase()),
              headers: toGmHeaders(request.headers),
              data: data,
              responseType: "blob",
              onload(res) {
                  resolve(parseGMResponse(res));
              },
              onabort() {
                  reject(new DOMException("Aborted", "AbortError"));
              },
              ontimeout() {
                  reject(new TypeError("Network request failed, timeout"));
              },
              onerror(err) {
                  reject(new TypeError("Failed to fetch: " + err.finalUrl));
              },
          });
      });
  }
  const httpMethods = ["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "TRACE", "OPTIONS", "CONNECT"];
  // a ts type helper to narrow type
  function includes(array, element) {
      return array.includes(element);
  }
  function gmXHRMethod(method) {
      if (includes(httpMethods, method)) {
          return method;
      }
      throw new Error(`unsupported http method ${method}`);
  }
  function toGmHeaders(h) {
      if (!h) {
          return undefined;
      }
      const t = {};
      h.forEach((value, key) => {
          t[value] = key;
      });
      return t;
  }

  return GM_fetch;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ21fZmV0Y2guanMiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy50cyIsIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcGFyc2VSYXdIZWFkZXJzKGg6IHN0cmluZyk6IEhlYWRlcnMge1xuICBjb25zdCBzID0gaC50cmltKCk7XG4gIGlmICghcykge1xuICAgIHJldHVybiBuZXcgSGVhZGVycygpO1xuICB9XG5cbiAgY29uc3QgYXJyYXk6IFtzdHJpbmcsIHN0cmluZ11bXSA9IHMuc3BsaXQoXCJcXHJcXG5cIikubWFwKCh2YWx1ZSkgPT4ge1xuICAgIGxldCBzID0gdmFsdWUuc3BsaXQoXCI6XCIpO1xuICAgIHJldHVybiBbc1swXS50cmltKCksIHNbMV0udHJpbSgpXTtcbiAgfSk7XG5cbiAgcmV0dXJuIG5ldyBIZWFkZXJzKGFycmF5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR01SZXNwb25zZShyZXM6IEdNLlJlc3BvbnNlPGFueT4pOiBSZXNwb25zZSB7XG4gIGNvbnN0IHIgPSBuZXcgUmVzcG9uc2UocmVzLnJlc3BvbnNlIGFzIEFycmF5QnVmZmVyLCB7XG4gICAgc3RhdHVzVGV4dDogcmVzLnN0YXR1c1RleHQsXG4gICAgc3RhdHVzOiByZXMuc3RhdHVzLFxuICAgIGhlYWRlcnM6IHBhcnNlUmF3SGVhZGVycyhyZXMucmVzcG9uc2VIZWFkZXJzKSxcbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIFwidXJsXCIsIHtcbiAgICB2YWx1ZTogcmVzLmZpbmFsVXJsLFxuICB9KTtcblxuICByZXR1cm4gcjtcbn1cbiIsImltcG9ydCB7IHBhcnNlR01SZXNwb25zZSB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIEdNX2ZldGNoKGlucHV0OiBSZXF1ZXN0SW5mbyB8IFVSTCwgaW5pdD86IFJlcXVlc3RJbml0KTogUHJvbWlzZTxSZXNwb25zZT4ge1xuICBjb25zdCByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpO1xuXG4gIGxldCBkYXRhOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGlmIChpbml0Py5ib2R5KSB7XG4gICAgZGF0YSA9IGF3YWl0IHJlcXVlc3QudGV4dCgpO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IFhIUihyZXF1ZXN0LCBkYXRhKTtcbn1cblxuZnVuY3Rpb24gWEhSKHJlcXVlc3Q6IFJlcXVlc3QsIGRhdGE6IHN0cmluZyB8IHVuZGVmaW5lZCk6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKFwiQWJvcnRlZFwiLCBcIkFib3J0RXJyb3JcIikpO1xuICAgIH1cblxuICAgIEdNLnhtbEh0dHBSZXF1ZXN0KHtcbiAgICAgIHVybDogcmVxdWVzdC51cmwsXG4gICAgICBtZXRob2Q6IGdtWEhSTWV0aG9kKHJlcXVlc3QubWV0aG9kLnRvVXBwZXJDYXNlKCkpLFxuICAgICAgaGVhZGVyczogdG9HbUhlYWRlcnMocmVxdWVzdC5oZWFkZXJzKSxcbiAgICAgIGRhdGE6IGRhdGEsXG4gICAgICByZXNwb25zZVR5cGU6IFwiYmxvYlwiLFxuICAgICAgb25sb2FkKHJlcykge1xuICAgICAgICByZXNvbHZlKHBhcnNlR01SZXNwb25zZShyZXMpKTtcbiAgICAgIH0sXG4gICAgICBvbmFib3J0KCkge1xuICAgICAgICByZWplY3QobmV3IERPTUV4Y2VwdGlvbihcIkFib3J0ZWRcIiwgXCJBYm9ydEVycm9yXCIpKTtcbiAgICAgIH0sXG4gICAgICBvbnRpbWVvdXQoKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKFwiTmV0d29yayByZXF1ZXN0IGZhaWxlZCwgdGltZW91dFwiKSk7XG4gICAgICB9LFxuICAgICAgb25lcnJvcihlcnIpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2g6IFwiICsgZXJyLmZpbmFsVXJsKSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcbn1cblxuY29uc3QgaHR0cE1ldGhvZHMgPSBbXCJHRVRcIiwgXCJQT1NUXCIsIFwiUFVUXCIsIFwiREVMRVRFXCIsIFwiUEFUQ0hcIiwgXCJIRUFEXCIsIFwiVFJBQ0VcIiwgXCJPUFRJT05TXCIsIFwiQ09OTkVDVFwiXSBhcyBjb25zdDtcblxuLy8gYSB0cyB0eXBlIGhlbHBlciB0byBuYXJyb3cgdHlwZVxuZnVuY3Rpb24gaW5jbHVkZXM8VCBleHRlbmRzIFUsIFU+KGFycmF5OiBSZWFkb25seUFycmF5PFQ+LCBlbGVtZW50OiBVKTogZWxlbWVudCBpcyBUIHtcbiAgcmV0dXJuIGFycmF5LmluY2x1ZGVzKGVsZW1lbnQgYXMgVCk7XG59XG5cbmZ1bmN0aW9uIGdtWEhSTWV0aG9kKG1ldGhvZDogc3RyaW5nKTogdHlwZW9mIGh0dHBNZXRob2RzW251bWJlcl0ge1xuICBpZiAoaW5jbHVkZXMoaHR0cE1ldGhvZHMsIG1ldGhvZCkpIHtcbiAgICByZXR1cm4gbWV0aG9kO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBodHRwIG1ldGhvZCAke21ldGhvZH1gKTtcbn1cblxuZnVuY3Rpb24gdG9HbUhlYWRlcnMoaDogSGVhZGVycyB8IHVuZGVmaW5lZCk6IHsgW2hlYWRlcjogc3RyaW5nXTogc3RyaW5nIH0gfCB1bmRlZmluZWQge1xuICBpZiAoIWgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgdDogeyBbaGVhZGVyOiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuICBoLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICB0W3ZhbHVlXSA9IGtleTtcbiAgfSk7XG5cbiAgcmV0dXJuIHQ7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0VBQU0sU0FBVSxlQUFlLENBQUMsQ0FBUyxFQUFBO0VBQ3ZDLElBQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO01BQ25CLElBQUksQ0FBQyxDQUFDLEVBQUU7VUFDTixPQUFPLElBQUksT0FBTyxFQUFFLENBQUM7RUFDdEIsS0FBQTtFQUVELElBQUEsTUFBTSxLQUFLLEdBQXVCLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxLQUFJO1VBQzlELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDekIsUUFBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0VBQ3BDLEtBQUMsQ0FBQyxDQUFDO0VBRUgsSUFBQSxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQzVCLENBQUM7RUFFSyxTQUFVLGVBQWUsQ0FBQyxHQUFxQixFQUFBO01BQ25ELE1BQU0sQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUF1QixFQUFFO1VBQ2xELFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBVTtVQUMxQixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU07RUFDbEIsUUFBQSxPQUFPLEVBQUUsZUFBZSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUM7RUFDOUMsS0FBQSxDQUFDLENBQUM7RUFFSCxJQUFBLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRTtVQUM5QixLQUFLLEVBQUUsR0FBRyxDQUFDLFFBQVE7RUFDcEIsS0FBQSxDQUFDLENBQUM7RUFFSCxJQUFBLE9BQU8sQ0FBQyxDQUFDO0VBQ1g7O0VDeEJlLGVBQWUsUUFBUSxDQUFDLEtBQXdCLEVBQUUsSUFBa0IsRUFBQTtNQUNqRixNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFFekMsSUFBQSxJQUFJLElBQXdCLENBQUM7TUFDN0IsSUFBSSxJQUFJLEVBQUUsSUFBSSxFQUFFO0VBQ2QsUUFBQSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7RUFDN0IsS0FBQTtFQUVELElBQUEsT0FBTyxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFDbEMsQ0FBQztFQUVELFNBQVMsR0FBRyxDQUFDLE9BQWdCLEVBQUUsSUFBd0IsRUFBQTtNQUNyRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sS0FBSTtVQUNyQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7Y0FDNUMsT0FBTyxNQUFNLENBQUMsSUFBSSxZQUFZLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7RUFDMUQsU0FBQTtVQUVELEVBQUUsQ0FBQyxjQUFjLENBQUM7Y0FDaEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHO2NBQ2hCLE1BQU0sRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztFQUNqRCxZQUFBLE9BQU8sRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztFQUNyQyxZQUFBLElBQUksRUFBRSxJQUFJO0VBQ1YsWUFBQSxZQUFZLEVBQUUsTUFBTTtFQUNwQixZQUFBLE1BQU0sQ0FBQyxHQUFHLEVBQUE7RUFDUixnQkFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7ZUFDL0I7Y0FDRCxPQUFPLEdBQUE7a0JBQ0wsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO2VBQ25EO2NBQ0QsU0FBUyxHQUFBO0VBQ1AsZ0JBQUEsTUFBTSxDQUFDLElBQUksU0FBUyxDQUFDLGlDQUFpQyxDQUFDLENBQUMsQ0FBQztlQUMxRDtFQUNELFlBQUEsT0FBTyxDQUFDLEdBQUcsRUFBQTtrQkFDVCxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsbUJBQW1CLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7ZUFDM0Q7RUFDRixTQUFBLENBQUMsQ0FBQztFQUNMLEtBQUMsQ0FBQyxDQUFDO0VBQ0wsQ0FBQztFQUVELE1BQU0sV0FBVyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQVUsQ0FBQztFQUU5RztFQUNBLFNBQVMsUUFBUSxDQUFpQixLQUF1QixFQUFFLE9BQVUsRUFBQTtFQUNuRSxJQUFBLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFZLENBQUMsQ0FBQztFQUN0QyxDQUFDO0VBRUQsU0FBUyxXQUFXLENBQUMsTUFBYyxFQUFBO0VBQ2pDLElBQUEsSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxFQUFFO0VBQ2pDLFFBQUEsT0FBTyxNQUFNLENBQUM7RUFDZixLQUFBO0VBRUQsSUFBQSxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixNQUFNLENBQUEsQ0FBRSxDQUFDLENBQUM7RUFDdkQsQ0FBQztFQUVELFNBQVMsV0FBVyxDQUFDLENBQXNCLEVBQUE7TUFDekMsSUFBSSxDQUFDLENBQUMsRUFBRTtFQUNOLFFBQUEsT0FBTyxTQUFTLENBQUM7RUFDbEIsS0FBQTtNQUVELE1BQU0sQ0FBQyxHQUFpQyxFQUFFLENBQUM7TUFDM0MsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEtBQUk7RUFDdkIsUUFBQSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQ2pCLEtBQUMsQ0FBQyxDQUFDO0VBRUgsSUFBQSxPQUFPLENBQUMsQ0FBQztFQUNYOzs7Ozs7OzsifQ==
