{"version":3,"file":"index.cjs","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["export function parseRawHeaders(h: string): Headers {\n  const s = h.trim();\n  if (!s) {\n    return new Headers();\n  }\n\n  const array: [string, string][] = s.split(\"\\r\\n\").map((value) => {\n    let s = value.split(\":\");\n    return [s[0].trim(), s[1].trim()];\n  });\n\n  return new Headers(array);\n}\n\nexport function parseGMResponse(req: Request, res: GM.Response<any>): Response {\n  return new ResImpl(res.response as Blob, {\n    statusCode: res.status,\n    statusText: res.statusText,\n    headers: parseRawHeaders(res.responseHeaders),\n    finalUrl: res.finalUrl,\n    redirected: res.finalUrl === req.url,\n  });\n}\n\ninterface ResInit {\n  redirected: boolean;\n  headers: Headers;\n  statusCode: number;\n  statusText: string;\n  finalUrl: string;\n}\n\nclass ResImpl implements Response {\n  private _bodyUsed: boolean;\n  private readonly rawBody: Blob;\n  private readonly init: ResInit;\n\n  readonly body: ReadableStream<Uint8Array> | null;\n  readonly headers: Headers;\n  readonly redirected: boolean;\n  readonly status: number;\n  readonly statusText: string;\n  readonly type: ResponseType;\n  readonly url: string;\n\n  constructor(body: Blob, init: ResInit) {\n    this.rawBody = body;\n    this.init = init;\n\n    this.body = toReadableStream(body);\n    const { headers, statusCode, statusText, finalUrl, redirected } = init;\n    this.headers = headers;\n    this.status = statusCode;\n    this.statusText = statusText;\n    this.url = finalUrl;\n    this.type = \"basic\";\n    this.redirected = redirected;\n    this._bodyUsed = false;\n  }\n\n  get bodyUsed(): boolean {\n    return this._bodyUsed;\n  }\n\n  get ok(): boolean {\n    return this.status < 300;\n  }\n\n  arrayBuffer(): Promise<ArrayBuffer> {\n    if (this.bodyUsed) {\n      throw new TypeError(\"Failed to execute 'arrayBuffer' on 'Response': body stream already read\");\n    }\n    this._bodyUsed = true;\n    return this.rawBody.arrayBuffer();\n  }\n\n  blob(): Promise<Blob> {\n    if (this.bodyUsed) {\n      throw new TypeError(\"Failed to execute 'blob' on 'Response': body stream already read\");\n    }\n    this._bodyUsed = true;\n    return Promise.resolve(this.rawBody.slice(0, this.rawBody.size, this.rawBody.type));\n  }\n\n  clone(): Response {\n    if (this.bodyUsed) {\n      throw new TypeError(\"Failed to execute 'clone' on 'Response': body stream already read\");\n    }\n    return new ResImpl(this.rawBody, this.init);\n  }\n\n  formData(): Promise<FormData> {\n    if (this.bodyUsed) {\n      throw new TypeError(\"Failed to execute 'formData' on 'Response': body stream already read\");\n    }\n    this._bodyUsed = true;\n    return this.rawBody.text().then(decode);\n  }\n\n  async json(): Promise<any> {\n    if (this.bodyUsed) {\n      throw new TypeError(\"Failed to execute 'json' on 'Response': body stream already read\");\n    }\n    this._bodyUsed = true;\n    return JSON.parse(await this.rawBody.text());\n  }\n\n  text(): Promise<string> {\n    if (this.bodyUsed) {\n      throw new TypeError(\"Failed to execute 'text' on 'Response': body stream already read\");\n    }\n    this._bodyUsed = true;\n    return this.rawBody.text();\n  }\n}\n\nfunction decode(body: string) {\n  const form = new FormData();\n\n  body\n    .trim()\n    .split(\"&\")\n    .forEach(function (bytes) {\n      if (bytes) {\n        const split = bytes.split(\"=\");\n        const name = split.shift()?.replace(/\\+/g, \" \");\n        const value = split.join(\"=\").replace(/\\+/g, \" \");\n        form.append(decodeURIComponent(name!), decodeURIComponent(value));\n      }\n    });\n\n  return form;\n}\n\nfunction toReadableStream(value: Blob) {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(value);\n      controller.close();\n    },\n  });\n}\n","import { parseGMResponse } from \"./utils\";\n\nexport default async function GM_fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response> {\n  const request = new Request(input, init);\n\n  let data: string | undefined;\n  if (init?.body) {\n    data = await request.text();\n  }\n\n  return await XHR(request, init, data);\n}\n\nfunction XHR(request: Request, init: RequestInit | undefined, data: string | undefined): Promise<Response> {\n  return new Promise((resolve, reject) => {\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException(\"Aborted\", \"AbortError\"));\n    }\n\n    GM.xmlHttpRequest({\n      url: request.url,\n      method: gmXHRMethod(request.method.toUpperCase()),\n      headers: Object.fromEntries(new Headers(init?.headers).entries()),\n      data: data,\n      responseType: \"blob\",\n      onload(res) {\n        resolve(parseGMResponse(request, res));\n      },\n      onabort() {\n        reject(new DOMException(\"Aborted\", \"AbortError\"));\n      },\n      ontimeout() {\n        reject(new TypeError(\"Network request failed, timeout\"));\n      },\n      onerror(err) {\n        reject(new TypeError(\"Failed to fetch: \" + err.finalUrl));\n      },\n    });\n  });\n}\n\nconst httpMethods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"HEAD\", \"TRACE\", \"OPTIONS\", \"CONNECT\"] as const;\n\n// a ts type helper to narrow type\nfunction includes<T extends U, U>(array: ReadonlyArray<T>, element: U): element is T {\n  return array.includes(element as T);\n}\n\nfunction gmXHRMethod(method: string): (typeof httpMethods)[number] {\n  if (includes(httpMethods, method)) {\n    return method;\n  }\n\n  throw new Error(`unsupported http method ${method}`);\n}\n"],"names":[],"mappings":"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"}